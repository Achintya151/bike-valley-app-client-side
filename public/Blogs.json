[
    {
        "id": 1,
        "question": "What are the different ways to manage a state in a React application?",
        "answer": [
            "There are four main types of state you need to properly manage in your React apps:",
            "Local (UI) state – Local state is data we manage in one or another component.Local state is most often managed in React using the useState hook.",
            "Global (UI) state – Global state is data we manage across multiple components.Global state is necessary when we want to get and update data anywhere in our app, or in multiple components at least.",
            "Server state – Data that comes from an external server that must be integrated with our UI state.Server state is a simple concept, but can be hard to manage alongside all of our local and global UI state."
        ]
    },
    {
        "id": 2,
        "question": "How does prototypical inheritance work?",
        "answer": [
            "Every object with its methods and properties contains an internal and hidden property known as [[Prototype]]. The Prototypal Inheritance is a feature in javascript used to add methods and properties in objects. It is a method by which an object can inherit the properties and methods of another object. Traditionally, in order to get and set the [[Prototype]] of an object, we use Object.getPrototypeOf and Object.setPrototypeOf. Nowadays, in modern language, it is being set using __proto__.",
            "Syntax: ChildObject.__proto__ = ParentObject"
        ]
    },
    {
        "id": 3,
        "question": "What is a unit test? Why should we write unit tests?",
        "answer": [
            "A unit test is a way of testing a unit - the smallest piece of code that can be logically isolated in a system. In most programming languages, that is a function, a subroutine, a method or property.",
            "Why should we write unit test-decrease defects and expose them early in the development lifecycle, increase code readability, enable code reuse and improve deployment velocity."
        ]
    },
    {
        "id": 4,
        "question": "React vs. Angular vs. Vue?",
        "answer": [
            "React - React can be used as a UI library to render elements, without enforcing a specific project structure, and that’s why it’s not strictly a framework. React Elements are the smallest building blocks of React apps. They are more powerful than DOM elements because the React DOM makes sure to update them efficiently whenever something changes.Components are larger building blocks that define independent and reusable pieces to be used throughout the application. They accept inputs called props and produce elements that are then displayed to the user. React is based on JavaScript, but it’s mostly combined with JSX (JavaScript XML), a syntax extension that allows you to create elements that contain HTML and JavaScript at the same time. Anything you create with JSX could also be created with the React JavaScript API, but most developers prefer JSX because it’s more intuitive.",
            "Vue - The Vue.js core library focuses on the View layer only. It’s called a progressive framework because you can extend its functionality with official and third-party packages, such as Vue Router or Vuex, to turn it into an actual framework.Although Vue is not strictly associated with the MVVM (Model-View-ViewModel) pattern, its design was partly inspired by it. With Vue, you’ll be working mostly on the ViewModel layer, to make sure that the application data is processed in a way that allows the framework to render an up-to-date View. Vue’s templating syntax lets you create View components, and it combines familiar HTML with special directives and features. This templating syntax is preferred, even though raw JavaScript and JSX are also supported.Components in Vue are small, self-contained, and can be reused throughout the application. Single File Components (SFCs) with the .vue extension contain HTML, CSS, and JavaScript so that all relevant code resides in one file.SFCs are the recommended way to organize code in Vue.js projects, especially larger ones. Tools such as Webpack or Browserify are required to transpile SFCs into working JavaScript code.",
            "AngularJS - AngularJS, the original framework, is an MVC (Model-View-Controller)) framework. But in Angular 2, there’s no strict association with MV*-patterns as it is also component-based.Projects in Angular are structured into Modules, Components, and Services. Each Angular application has at least one root component and one root module. Each component in Angular contains a Template, a Class that defines the application logic, and MetaData (Decorators). The metadata for a component tells Angular where to find the building blocks that it needs to create and present its view. Angular templates are written in HTML but can also include Angular template syntax with special directives to output reactive data and render multiple elements, among other things. Services in Angular are used by Components to delegate business-logic tasks such as fetching data or validating input. They are a distinct part of Angular applications. While Angular doesn’t enforce their use, it’s highly suggested to structure apps as a set of distinct services that can be reused. Angular is built in TypeScript, so its use is recommended to get the most seamless experience, but plain JavaScript is also supported."
        ]
    }
]